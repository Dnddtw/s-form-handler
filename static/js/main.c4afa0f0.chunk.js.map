{"version":3,"sources":["assets/images/loader.svg","components/Loader/index.js","components/Form/FormComponents.js","components/Form/Forms.js","components/Form/index.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Loader","react_default","a","createElement","className","src","loader","alt","FormLabel","props","htmlFor","concat","name","children","InputInvalidText","InputEmail","formID","_props$required","required","handleInputChange","formElementData","getFormElementValues","value","valuel","ifError","valueInvalid","forName","FormComponents_FormLabel","type","onChange","event","id","autoComplete","FormComponents_InputInvalidText","InputPassword","_props$required2","InputPasswordWithLink","_props$required3","href","FormTitle","FormSubmitButton","toggleValidAvailable","onSubmit","FormAdditional","togglePopupForms","onClick","FormSelect","FormTermOfUse","_props$required4","FormSignin","_props$submitResponse","submitResponse","disabled","FormComponents_FormTitle","FormComponents_InputEmail","FormComponents_InputPasswordWithLink","FormComponents_FormSubmitButton","FormComponents_FormAdditional","components_Loader","FormSignup","_props$submitResponse2","FormComponents_InputPassword","FormComponents_FormSelect","FormComponents_FormTermOfUse","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","element","target","checked","thisFormsData","state","formsData","formData","isValidAvailable","validHandler","setState","objectSpread","defineProperty","preventDefault","onSubmitValidThisForm","validedData","entries","forEach","_ref","_ref2","slicedToArray","assign","fakeSubmitLoading","filter","_ref3","_ref4","length","setTimeout","validEmail","validPassword","errorMessage","email","empty","test","invalid","password","hasOwnProperty","formSwitch","signin","signup","repeatPassword","citizenship","termOfUse","_this$state","Forms_FormSignup","Forms_FormSignin","Component","App","components_Form","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.c4afa0f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.283aae5e.svg\";","import React from 'react';\r\nimport loader from '../../assets/images/loader.svg';\r\n\r\nconst Loader = () => <div className=\"form__loader\"><img src={loader} alt=\"\" className=\"loader\"/></div>;\r\n\r\nexport default Loader;","import React from 'react';\r\n\r\nconst FormLabel = (props) => {\r\n    return <label htmlFor={`${props.name}`} className=\"form__label\"> {props.children} </label>\r\n}\r\n\r\nconst InputInvalidText = (props) => {\r\n    return <p className=\"form__invalid\"> {props.children} </p>\r\n}\r\n\r\nconst InputEmail = (props) => {\r\n    const { formID, name, required = false, handleInputChange, getFormElementValues } = props;\r\n\r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n    const ifError = formElementData.valueInvalid;\r\n\r\n    const forName = `${formID}-${name}`;\r\n    \r\n    return (\r\n        <div className=\"form__element\">\r\n            <FormLabel name={forName}> {props.children} </FormLabel>\r\n            <input \r\n                type=\"text\" \r\n                onChange={(event) => handleInputChange(formID, { name }, event)} \r\n                className={`form__input ${ifError ? 'invalid' : ''}`}\r\n                id={forName} \r\n                required={required}\r\n                autoComplete=\"off\"\r\n                name={name}\r\n                value={value}\r\n            />\r\n            {ifError && <InputInvalidText>{ifError}</InputInvalidText>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst InputPassword = (props) => {\r\n    const { formID, name, required = false, handleInputChange, getFormElementValues } = props;\r\n    \r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n    const ifError = formElementData.valueInvalid;\r\n\r\n    const forName = `${formID}-${name}`;\r\n\r\n    return (\r\n        <div className=\"form__element\">\r\n            <FormLabel name={forName}> {props.children} </FormLabel>\r\n            <input \r\n                type=\"password\" \r\n                className={`form__input ${ifError ? 'invalid' : ''}`}\r\n                onChange={(event) => handleInputChange(formID, { name }, event)}\r\n                id={forName} \r\n                required={required}\r\n                autoComplete=\"off\"\r\n                name={name}\r\n                value={value}\r\n            />\r\n            {ifError && <InputInvalidText>{ifError}</InputInvalidText>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst InputPasswordWithLink = (props) => {\r\n    const { formID, name, required = false, handleInputChange, getFormElementValues } = props;\r\n    \r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n    const ifError = formElementData.valueInvalid;\r\n\r\n    const forName = `${formID}-${name}`;\r\n\r\n    return (\r\n        <div className=\"form__element\">\r\n            <div className=\"form__flex\">\r\n                <FormLabel name={forName}> {props.children} </FormLabel>\r\n                <a href=\"#\" className=\"form__link\">Забыли пароль?</a>    \r\n            </div>\r\n            <input \r\n                type=\"password\" \r\n                className={`form__input ${ifError ? 'invalid' : ''}`}\r\n                onChange={(event) => handleInputChange(formID, { name }, event)}\r\n                id={forName} \r\n                required={required}\r\n                autoComplete=\"off\"\r\n                name={name}\r\n                value={value}\r\n            />\r\n            {ifError && <InputInvalidText>{ifError}</InputInvalidText>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormTitle = (props) => {\r\n    return <h1 className=\"form__title\">{props.children}</h1>   \r\n};\r\n\r\nconst FormSubmitButton = (props) => {\r\n    const { formID, toggleValidAvailable } = props;\r\n    \r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"submit\" \r\n                className=\"form__submit\"\r\n                onSubmit={(event) => toggleValidAvailable(formID, event)}>\r\n                {props.children}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormAdditional = (props) => {\r\n    const { togglePopupForms } = props;\r\n\r\n    return (\r\n        <div className=\"popup__additional\">\r\n            <button className=\"popup__link\" onClick={togglePopupForms}> {props.children} </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormSelect = (props) => {\r\n    const { formID, name, handleInputChange, getFormElementValues, required } = props;\r\n    \r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n\r\n    const forName = `${formID}-${name}`;\r\n\r\n    return (\r\n        <div className=\"form__element\">\r\n            <FormLabel name={forName}> {props.children} </FormLabel>\r\n            <div className=\"select-container\">\r\n                <select \r\n                    name={name} \r\n                    id={forName}  \r\n                    className=\"form__select\"\r\n                    required={required}\r\n                    onChange={(event) => handleInputChange(formID, { name }, event)}\r\n                    value={value}>\r\n                    <option value=\"1111\">1111</option>\r\n                    <option value=\"2222\">2222</option>\r\n                    <option value=\"3333\">3333</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormTermOfUse = (props) => {\r\n    const { formID, name, required = false, handleInputChange, getFormElementValues } = props;\r\n    \r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n\r\n    const forName = `${formID}-${name}`;\r\n\r\n    return (\r\n        <div className=\"form__element checkbox\">\r\n            <label htmlFor={forName} className=\"checkbox__label\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name={name} \r\n                    required={required}\r\n                    id={forName} \r\n                    autoComplete=\"off\"\r\n                    className=\"checkbox__checkbox\" \r\n                    onChange={(event) => handleInputChange(formID, { name }, event)}\r\n                    value={value}\r\n                />\r\n                <span className=\"checkbox__checkmark\"></span> {props.children}\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { \r\n    InputEmail, \r\n    FormTitle, \r\n    InputPassword, \r\n    FormSubmitButton, \r\n    FormAdditional, \r\n    InputPasswordWithLink,\r\n    FormSelect,\r\n    FormTermOfUse\r\n};","import React from 'react';\r\nimport Loader from '../Loader';\r\nimport { \r\n    FormTitle, \r\n    InputEmail, \r\n    InputPassword, \r\n    FormSubmitButton, \r\n    FormAdditional, \r\n    FormTermOfUse,\r\n    InputPasswordWithLink,\r\n    FormSelect } from './FormComponents';\r\n\r\nconst FormSignin = (props) => {\r\n    const { formID, handleInputChange, getFormElementValues, togglePopupForms, toggleValidAvailable, submitResponse = true } = props;\r\n\r\n    return (\r\n        <div className=\"form form__container\">\r\n            <form className=\"form__sign-in\" onSubmit={(event) => toggleValidAvailable(formID, event)}>\r\n                <fieldset disabled={submitResponse}>\r\n                    <FormTitle>Вход в систему</FormTitle>    \r\n                    <InputEmail \r\n                        handleInputChange={handleInputChange}\r\n                        getFormElementValues={getFormElementValues} \r\n                        formID={formID}\r\n                        // required=\"required\"\r\n                        name=\"email\"> \r\n                        Электронная почта \r\n                    </InputEmail>\r\n\r\n                    <InputPasswordWithLink\r\n                        handleInputChange={handleInputChange}\r\n                        getFormElementValues={getFormElementValues} \r\n                        formID={formID}\r\n                        // required=\"required\"\r\n                        name=\"password\"> \r\n                        Пароль\r\n                    </InputPasswordWithLink>\r\n\r\n                    <FormSubmitButton formID={formID}> Войти </FormSubmitButton>\r\n                    <FormAdditional togglePopupForms={togglePopupForms}>Зарегистрироваться</FormAdditional> \r\n\r\n                    {submitResponse && <Loader />}   \r\n                </fieldset>   \r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormSignup = (props) => {\r\n    const { formID, handleInputChange, getFormElementValues, togglePopupForms, toggleValidAvailable, submitResponse = true } = props;\r\n\r\n    return (\r\n        <div className=\"form form__container\">\r\n            <form className=\"form__sign-up\" onSubmit={(event) => toggleValidAvailable(formID, event)}>\r\n                <fieldset disabled={submitResponse}>\r\n                    <FormTitle>Регистрация в системе</FormTitle> \r\n                    <InputEmail \r\n                        handleInputChange={handleInputChange}\r\n                        getFormElementValues={getFormElementValues} \r\n                        formID={formID}\r\n                        required=\"required\"\r\n                        name=\"email\"> \r\n                        Электронная почта \r\n                    </InputEmail>\r\n\r\n                    <InputPassword\r\n                        handleInputChange={handleInputChange} \r\n                        getFormElementValues={getFormElementValues}\r\n                        formID={formID}\r\n                        required=\"required\"\r\n                        name=\"password\">\r\n                        Пароль\r\n                    </InputPassword>\r\n\r\n                    <InputPassword\r\n                        handleInputChange={handleInputChange} \r\n                        getFormElementValues={getFormElementValues}\r\n                        formID={formID}\r\n                        required=\"required\"\r\n                        name=\"repeatPassword\">\r\n                        Повторите пароль\r\n                    </InputPassword>\r\n\r\n                    <FormSelect\r\n                        name=\"citizenship\"\r\n                        formID={formID}\r\n                        required=\"required\"\r\n                        handleInputChange={handleInputChange}\r\n                        getFormElementValues={getFormElementValues}>\r\n                        Гражданство\r\n                    </FormSelect>\r\n\r\n                    <FormTermOfUse\r\n                        name=\"termOfUse\"\r\n                        formID={formID}\r\n                        required=\"required\"\r\n                        handleInputChange={handleInputChange}\r\n                        getFormElementValues={getFormElementValues}>\r\n                        Соглашаюсь с <a href=\"#\" className=\"text-blue\">правилами и условиями сервиса</a>\r\n                    </FormTermOfUse>\r\n\r\n                    <FormSubmitButton formID={formID}> Зарегистрироваться </FormSubmitButton>\r\n                    <FormAdditional togglePopupForms={togglePopupForms}>Войти</FormAdditional>\r\n                    \r\n                    {submitResponse && <Loader />}\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { FormSignin, FormSignup };","import React, { Component } from 'react';\r\nimport { FormSignin, FormSignup } from './Forms';\r\nimport errorMessage from '../../text/text.json';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            submitResponse: false,\r\n            formSwitch: true,\r\n            formsData: {\r\n                signin: {\r\n                    isValidAvailable: false,\r\n                    email: {value: \"\", valueInvalid: \"\"},\r\n                    password: {value: \"\", valueInvalid: \"\"}   \r\n                },\r\n                signup: {\r\n                    isValidAvailable: false,\r\n                    email: { value: \"\", valueInvalid: \"\"} ,\r\n                    password: { value: \"\", valueInvalid: \"\"} ,\r\n                    repeatPassword: { value: \"\", valueInvalid: \"\" },\r\n                    citizenship: {value: \"\", valueInvalid: \"\"},\r\n                    termOfUse: {value: false, valueInvalid: \"\"}\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    handleInputChange = (id, element, event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const thisFormsData = this.state.formsData;\r\n        const formData = thisFormsData[id];\r\n        const { isValidAvailable } = formData;\r\n        const name = element.name;\r\n        const valueInvalid = isValidAvailable ? this.validHandler(name, value) : '';\r\n    \r\n        this.setState({\r\n            ...this.state,\r\n            formsData: {\r\n                ...thisFormsData,\r\n                [id]: {\r\n                    ...formData,\r\n                    [element.name]: {\r\n                        value: value,\r\n                        valueInvalid: valueInvalid\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }  \r\n\r\n    toggleValidAvailable = (id, event) => {\r\n        // It allows check the inputs changes in real time, when user clicked on submit button\r\n        event.preventDefault();\r\n        const thisFormsData = this.state.formsData;\r\n\r\n        this.setState({\r\n            formsData: {\r\n                ...thisFormsData,\r\n                [id]: {\r\n                    ...thisFormsData[id],\r\n                    isValidAvailable: true\r\n                }\r\n            }\r\n        }, () => { this.onSubmitValidThisForm(id) });\r\n    }\r\n\r\n    onSubmitValidThisForm = (id) => {\r\n        // The function replaces inputInvalid message (erros)\r\n        const formsData = this.state.formsData;\r\n        const formData = formsData[id];\r\n        const validedData = {};\r\n        \r\n        // It makes a new object with updated inputInvalid (errors)\r\n        Object.entries(formData).forEach(([name, element]) => {\r\n            if (name === 'isValidAvailable') {\r\n                validedData[name] = element;\r\n            } else {\r\n                element.valueInvalid = this.validHandler(name, element.value);\r\n                Object.assign(validedData, { [name]: element });\r\n            }\r\n        });\r\n\r\n        // It replaces previous formsData[id] with new\r\n        this.setState({\r\n            formsData: {\r\n                ...formsData,\r\n                [id]: validedData\r\n            }\r\n        }, () => {this.fakeSubmitLoading(id)});\r\n    }\r\n\r\n    fakeSubmitLoading = (id) => {\r\n        const formData = this.state.formsData[id];\r\n\r\n        const canIChangeSubmitResponseState = Object.entries(formData).filter(([name, element]) => {\r\n            if (typeof element !== 'object' || name === \"citizenship\") {\r\n                return false;\r\n            } \r\n\r\n            return element.valueInvalid;\r\n        });\r\n\r\n        if (canIChangeSubmitResponseState.length === 0) {\r\n            this.setState({\r\n                submitResponse: true\r\n            }, () => {\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        submitResponse: false\r\n                    });\r\n                }, 2500);\r\n            });\r\n        }\r\n    }\r\n\r\n    validHandler = (name, value) => {\r\n        // General valid handler\r\n        switch(name) {\r\n            case \"email\":\r\n                return this.validEmail(value);\r\n            case \"password\":\r\n            default:\r\n                return this.validPassword(value);\r\n        }\r\n    }\r\n\r\n    validEmail = (value) => {\r\n        // Valid function\r\n        const emailValidRegExp = /\\S+@\\S+\\.\\S+/;\r\n\r\n        if (value.length === 0) {\r\n            return errorMessage.email.empty;\r\n        } else if (!emailValidRegExp.test(value)) {\r\n            return errorMessage.email.invalid;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    validPassword = (value) => {\r\n        // Valid function\r\n        return value.length === 0 ? errorMessage.password.empty : '';\r\n    }\r\n\r\n    getFormElementValues = (id, name) => {\r\n        // It transfers a value of input to functional component \r\n        const formData = this.state.formsData[id] ? this.state.formsData[id] : {};\r\n        return formData.hasOwnProperty(name) ? formData[name] : '';\r\n    }\r\n\r\n    togglePopupForms = (event) => {\r\n        // It changes the popups\r\n        event.preventDefault();\r\n        this.setState({\r\n            formSwitch: !this.state.formSwitch\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { formSwitch, submitResponse } = this.state;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {formSwitch &&  <FormSignup \r\n                    formID=\"signup\" \r\n                    handleInputChange={this.handleInputChange}\r\n                    getFormElementValues={this.getFormElementValues}\r\n                    togglePopupForms={this.togglePopupForms}\r\n                    toggleValidAvailable={this.toggleValidAvailable}\r\n                    submitResponse={submitResponse}\r\n                />  || <FormSignin \r\n                    formID=\"signin\"\r\n                    handleInputChange={this.handleInputChange}\r\n                    getFormElementValues={this.getFormElementValues}\r\n                    togglePopupForms={this.togglePopupForms}\r\n                    toggleValidAvailable={this.toggleValidAvailable}\r\n                    submitResponse={submitResponse}\r\n                />}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Form from \"./Form\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"popup popup__container\">\r\n        <Form />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/App\";\r\n\r\nimport \"./assets/styles/main.scss\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}