{"version":3,"sources":["components/Form/FormComponents.js","components/Form/Forms.js","components/Form/index.js","components/App.js","index.js"],"names":["FormLabel","props","react_default","a","createElement","htmlFor","concat","name","className","children","InputInvalidText","InputEmail","formID","_props$required","required","handleInputChange","formElementData","getFormElementValues","value","valuel","ifError","valueInvalid","forName","FormComponents_FormLabel","type","onChange","event","id","autoComplete","FormComponents_InputInvalidText","InputPassword","_props$required2","InputPasswordWithLink","_props$required3","href","FormTitle","FormSubmitButton","toggleValidAvailable","onSubmit","FormAdditional","togglePopupForms","onClick","FormSelect","FormTermOfUse","_props$required4","FormSignin","FormComponents_FormTitle","FormComponents_InputEmail","FormComponents_InputPasswordWithLink","FormComponents_FormSubmitButton","FormComponents_FormAdditional","FormSignup","FormComponents_InputPassword","FormComponents_FormSelect","FormComponents_FormTermOfUse","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","element","target","checked","thisFormsData","state","formsData","formData","isValidAvailable","validHandler","setState","objectSpread","defineProperty","preventDefault","onSubmitValidThisForm","validedData","entries","forEach","_ref","_ref2","slicedToArray","assign","validEmail","validPassword","length","errorMessage","email","empty","test","invalid","password","hasOwnProperty","formSwitch","submitResponse","signin","signup","repeatPassword","citizenship","termOfUse","Forms_FormSignup","Forms_FormSignin","Component","App","components_Form","ReactDOM","render","components_App","document","getElementById"],"mappings":"uPAEMA,EAAY,SAACC,GACf,OAAOC,EAAAC,EAAAC,cAAA,SAAOC,QAAO,GAAAC,OAAKL,EAAMM,MAAQC,UAAU,eAA3C,IAA2DP,EAAMQ,SAAjE,MAGLC,EAAmB,SAACT,GACtB,OAAOC,EAAAC,EAAAC,cAAA,KAAGI,UAAU,iBAAb,IAA+BP,EAAMQ,SAArC,MAGLE,EAAa,SAACV,GAAU,IAClBW,EAA4EX,EAA5EW,OAAQL,EAAoEN,EAApEM,KADUM,EAC0DZ,EAA9Da,gBADI,IAAAD,KACcE,EAA4Cd,EAA5Cc,kBAElCC,GAAkBC,EAF4DhB,EAAzBgB,sBAEdL,EAAQL,GAC/CW,EAAQF,EAAgBG,OACxBC,EAAUJ,EAAgBK,aAE1BC,EAAO,GAAAhB,OAAMM,EAAN,KAAAN,OAAgBC,GAE7B,OACIL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACXN,EAAAC,EAAAC,cAACmB,EAAD,CAAWhB,KAAMe,GAAjB,IAA4BrB,EAAMQ,SAAlC,KACAP,EAAAC,EAAAC,cAAA,SACIoB,KAAK,OACLC,SAAU,SAACC,GAAD,OAAWX,EAAkBH,EAAQ,CAAEL,QAAQmB,IACzDlB,UAAS,eAAAF,OAAiBc,EAAU,UAAY,IAChDO,GAAIL,EACJR,SAAUA,EACVc,aAAa,MACbrB,KAAMA,EACNW,MAAOA,IAEVE,GAAWlB,EAAAC,EAAAC,cAACyB,EAAD,KAAmBT,KAKrCU,EAAgB,SAAC7B,GAAU,IACrBW,EAA4EX,EAA5EW,OAAQL,EAAoEN,EAApEM,KADawB,EACuD9B,EAA9Da,gBADO,IAAAiB,KACWhB,EAA4Cd,EAA5Cc,kBAElCC,GAAkBC,EAF4DhB,EAAzBgB,sBAEdL,EAAQL,GAC/CW,EAAQF,EAAgBG,OACxBC,EAAUJ,EAAgBK,aAE1BC,EAAO,GAAAhB,OAAMM,EAAN,KAAAN,OAAgBC,GAE7B,OACIL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACXN,EAAAC,EAAAC,cAACmB,EAAD,CAAWhB,KAAMe,GAAjB,IAA4BrB,EAAMQ,SAAlC,KACAP,EAAAC,EAAAC,cAAA,SACIoB,KAAK,WACLhB,UAAS,eAAAF,OAAiBc,EAAU,UAAY,IAChDK,SAAU,SAACC,GAAD,OAAWX,EAAkBH,EAAQ,CAAEL,QAAQmB,IACzDC,GAAIL,EACJR,SAAUA,EACVc,aAAa,MACbrB,KAAMA,EACNW,MAAOA,IAEVE,GAAWlB,EAAAC,EAAAC,cAACyB,EAAD,KAAmBT,KAKrCY,EAAwB,SAAC/B,GAAU,IAC7BW,EAA4EX,EAA5EW,OAAQL,EAAoEN,EAApEM,KADqB0B,EAC+ChC,EAA9Da,gBADe,IAAAmB,KACGlB,EAA4Cd,EAA5Cc,kBAElCC,GAAkBC,EAF4DhB,EAAzBgB,sBAEdL,EAAQL,GAC/CW,EAAQF,EAAgBG,OACxBC,EAAUJ,EAAgBK,aAE1BC,EAAO,GAAAhB,OAAMM,EAAN,KAAAN,OAAgBC,GAE7B,OACIL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACXN,EAAAC,EAAAC,cAACmB,EAAD,CAAWhB,KAAMe,GAAjB,IAA4BrB,EAAMQ,SAAlC,KACAP,EAAAC,EAAAC,cAAA,KAAG8B,KAAK,IAAI1B,UAAU,cAAtB,+EAEJN,EAAAC,EAAAC,cAAA,SACIoB,KAAK,WACLhB,UAAS,eAAAF,OAAiBc,EAAU,UAAY,IAChDK,SAAU,SAACC,GAAD,OAAWX,EAAkBH,EAAQ,CAAEL,QAAQmB,IACzDC,GAAIL,EACJR,SAAUA,EACVc,aAAa,MACbrB,KAAMA,EACNW,MAAOA,IAEVE,GAAWlB,EAAAC,EAAAC,cAACyB,EAAD,KAAmBT,KAKrCe,EAAY,SAAClC,GACf,OAAOC,EAAAC,EAAAC,cAAA,MAAII,UAAU,eAAeP,EAAMQ,WAGxC2B,EAAmB,SAACnC,GAAU,IACxBW,EAAiCX,EAAjCW,OAAQyB,EAAyBpC,EAAzBoC,qBAEhB,OACInC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIoB,KAAK,SACLhB,UAAU,eACV8B,SAAU,SAACZ,GAAD,OAAWW,EAAqBzB,EAAQc,KACjDzB,EAAMQ,YAMjB8B,EAAiB,SAACtC,GAAU,IACtBuC,EAAqBvC,EAArBuC,iBAER,OACItC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,qBACXN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cAAciC,QAASD,GAAzC,IAA6DvC,EAAMQ,SAAnE,OAKNiC,EAAa,SAACzC,GAAU,IAClBW,EAA0DX,EAA1DW,OAAQL,EAAkDN,EAAlDM,KAAMQ,EAA4Cd,EAA5Cc,kBAGhBG,GADkBD,EAF0ChB,EAAzBgB,sBAEIL,EAAQL,GACvBY,OAExBG,EAAO,GAAAhB,OAAMM,EAAN,KAAAN,OAAgBC,GAE7B,OACIL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACXN,EAAAC,EAAAC,cAACmB,EAAD,CAAWhB,KAAMe,GAAjB,IAA4BrB,EAAMQ,SAAlC,KACAP,EAAAC,EAAAC,cAAA,OAAKI,UAAU,oBACXN,EAAAC,EAAAC,cAAA,UACIG,KAAMA,EACNoB,GAAIL,EACJd,UAAU,eACViB,SAAU,SAACC,GAAD,OAAWX,EAAkBH,EAAQ,CAAEL,QAAQmB,IACzDR,MAAOA,GAEPhB,EAAAC,EAAAC,cAAA,UAAQc,MAAM,QAAd,QACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAM,QAAd,QACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAM,QAAd,YAOdyB,EAAgB,SAAC1C,GAAU,IACrBW,EAA4EX,EAA5EW,OAAQL,EAAoEN,EAApEM,KADaqC,EACuD3C,EAA9Da,gBADO,IAAA8B,KACW7B,EAA4Cd,EAA5Cc,kBAGlCG,GADkBD,EAF4DhB,EAAzBgB,sBAEdL,EAAQL,GACvBY,OAExBG,EAAO,GAAAhB,OAAMM,EAAN,KAAAN,OAAgBC,GAE7B,OACIL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,0BACXN,EAAAC,EAAAC,cAAA,SAAOC,QAASiB,EAASd,UAAU,mBAC/BN,EAAAC,EAAAC,cAAA,SACIoB,KAAK,WACLjB,KAAMA,EACNO,SAAUA,EACVa,GAAIL,EACJM,aAAa,MACbpB,UAAU,qBACViB,SAAU,SAACC,GAAD,OAAWX,EAAkBH,EAAQ,CAAEL,QAAQmB,IACzDR,MAAOA,IAEXhB,EAAAC,EAAAC,cAAA,QAAMI,UAAU,wBAXpB,IAWmDP,EAAMQ,YCjK/DoC,EAAa,SAAC5C,GAAU,IAClBW,EAA4FX,EAA5FW,OAAQG,EAAoFd,EAApFc,kBAAmBE,EAAiEhB,EAAjEgB,qBAAsBuB,EAA2CvC,EAA3CuC,iBAAkBH,EAAyBpC,EAAzBoC,qBAE3E,OACInC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,wBACXN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,gBAAgB8B,SAAU,SAACZ,GAAD,OAAWW,EAAqBzB,EAAQc,KAC9ExB,EAAAC,EAAAC,cAAC0C,EAAD,mFAEA5C,EAAAC,EAAAC,cAAC2C,EAAD,CACIhC,kBAAmBA,EACnBE,qBAAsBA,EACtBL,OAAQA,EAERL,KAAK,SALT,qGASAL,EAAAC,EAAAC,cAAC4C,EAAD,CACIjC,kBAAmBA,EACnBE,qBAAsBA,EACtBL,OAAQA,EAERL,KAAK,YALT,wCASAL,EAAAC,EAAAC,cAAC6C,EAAD,CAAkBrC,OAAQA,GAA1B,oCAEAV,EAAAC,EAAAC,cAAC8C,EAAD,CAAgBV,iBAAkBA,GAAlC,mHAMVW,EAAa,SAAClD,GAAU,IAClBW,EAA4FX,EAA5FW,OAAQG,EAAoFd,EAApFc,kBAAmBE,EAAiEhB,EAAjEgB,qBAAsBuB,EAA2CvC,EAA3CuC,iBAAkBH,EAAyBpC,EAAzBoC,qBAE3E,OACInC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,wBACXN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,gBAAgB8B,SAAU,SAACZ,GAAD,OAAWW,EAAqBzB,EAAQc,KAC9ExB,EAAAC,EAAAC,cAAC0C,EAAD,6HAEA5C,EAAAC,EAAAC,cAAC2C,EAAD,CACIhC,kBAAmBA,EACnBE,qBAAsBA,EACtBL,OAAQA,EACRE,SAAS,WACTP,KAAK,SALT,qGASAL,EAAAC,EAAAC,cAACgD,EAAD,CACIrC,kBAAmBA,EACnBE,qBAAsBA,EACtBL,OAAQA,EACRE,SAAS,WACTP,KAAK,YALT,wCASAL,EAAAC,EAAAC,cAACgD,EAAD,CACIrC,kBAAmBA,EACnBE,qBAAsBA,EACtBL,OAAQA,EACRE,SAAS,WACTP,KAAK,kBALT,+FASAL,EAAAC,EAAAC,cAACiD,EAAD,CACI9C,KAAK,cACLK,OAAQA,EACRG,kBAAmBA,EACnBE,qBAAsBA,GAJ1B,sEAQAf,EAAAC,EAAAC,cAACkD,EAAD,CACI/C,KAAK,YACLK,OAAQA,EACRE,SAAS,WACTC,kBAAmBA,EACnBE,qBAAsBA,GAL1B,uEAMiBf,EAAAC,EAAAC,cAAA,KAAG8B,KAAK,IAAI1B,UAAU,aAAtB,oKAGjBN,EAAAC,EAAAC,cAAC6C,EAAD,CAAkBrC,OAAQA,GAA1B,kHAEAV,EAAAC,EAAAC,cAAC8C,EAAD,CAAgBV,iBAAkBA,GAAlC,4CC2DDe,cAzJX,SAAAA,EAAYtD,GAAO,IAAAuD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1D,KAoBVc,kBAAoB,SAACY,EAAIoC,EAASrC,GAC9B,IAAMsC,EAAStC,EAAMsC,OACf9C,EAAwB,aAAhB8C,EAAOxC,KAAsBwC,EAAOC,QAAUD,EAAO9C,MAC7DgD,EAAgBV,EAAKW,MAAMC,UAC3BC,EAAWH,EAAcvC,GACvB2C,EAAqBD,EAArBC,iBACF/D,EAAOwD,EAAQxD,KACfc,EAAeiD,EAAmBd,EAAKe,aAAahE,EAAMW,GAAS,GAEzEsC,EAAKgB,SAALf,OAAAgB,EAAA,EAAAhB,CAAA,GACOD,EAAKW,MADZ,CAEIC,UAAUX,OAAAgB,EAAA,EAAAhB,CAAA,GACHS,EADET,OAAAiB,EAAA,EAAAjB,CAAA,GAEJ9B,EAFI8B,OAAAgB,EAAA,EAAAhB,CAAA,GAGEY,EAHFZ,OAAAiB,EAAA,EAAAjB,CAAA,GAIAM,EAAQxD,KAAO,CACZW,MAAOA,EACPG,aAAcA,WAtCfmC,EA8CnBnB,qBAAuB,SAACV,EAAID,GAExBA,EAAMiD,iBACN,IAAMT,EAAgBV,EAAKW,MAAMC,UAEjCZ,EAAKgB,SAAS,CACVJ,UAAUX,OAAAgB,EAAA,EAAAhB,CAAA,GACHS,EADET,OAAAiB,EAAA,EAAAjB,CAAA,GAEJ9B,EAFI8B,OAAAgB,EAAA,EAAAhB,CAAA,GAGES,EAAcvC,GAHhB,CAID2C,kBAAkB,OAG3B,WAAQd,EAAKoB,sBAAsBjD,MA3DvB6B,EA8DnBoB,sBAAwB,SAACjD,GAErB,IAAMyC,EAAYZ,EAAKW,MAAMC,UACvBC,EAAWD,EAAUzC,GACrBkD,EAAc,GAGpBpB,OAAOqB,QAAQT,GAAUU,QAAQ,SAAAC,GAAqB,IAAAC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAuB,EAAA,GAAnBzE,EAAmB0E,EAAA,GAAblB,EAAakB,EAAA,GACrC,qBAAT1E,EACAsE,EAAYtE,GAAQwD,GAEpBA,EAAQ1C,aAAemC,EAAKe,aAAahE,EAAMwD,EAAQ7C,OACvDuC,OAAO0B,OAAON,EAAdpB,OAAAiB,EAAA,EAAAjB,CAAA,GAA8BlD,EAAOwD,OAK7CP,EAAKgB,SAAS,CACVJ,UAAUX,OAAAgB,EAAA,EAAAhB,CAAA,GACHW,EADEX,OAAAiB,EAAA,EAAAjB,CAAA,GAEJ9B,EAAKkD,OAlFCrB,EAuFnBe,aAAe,SAAChE,EAAMW,GAElB,OAAOX,GACH,IAAK,QACD,OAAOiD,EAAK4B,WAAWlE,GAC3B,IAAK,WACL,QACI,OAAOsC,EAAK6B,cAAcnE,KA9FnBsC,EAkGnB4B,WAAa,SAAClE,GAIV,OAAqB,IAAjBA,EAAMoE,OACCC,EAAaC,MAAMC,MAHL,eAIIC,KAAKxE,GAI3B,GAHIqE,EAAaC,MAAMG,SAzGfnC,EA+GnB6B,cAAgB,SAACnE,GAEb,OAAwB,IAAjBA,EAAMoE,OAAeC,EAAaK,SAASH,MAAQ,IAjH3CjC,EAoHnBvC,qBAAuB,SAACU,EAAIpB,GAExB,IAAM8D,EAAWb,EAAKW,MAAMC,UAAUzC,GAAM6B,EAAKW,MAAMC,UAAUzC,GAAM,GACvE,OAAO0C,EAASwB,eAAetF,GAAQ8D,EAAS9D,GAAQ,IAvHzCiD,EA0HnBhB,iBAAmB,SAACd,GAEhBA,EAAMiD,iBACNnB,EAAKgB,SAAS,CACVsB,YAAatC,EAAKW,MAAM2B,cA5H5BtC,EAAKW,MAAQ,CACT4B,gBAAgB,EAChBD,YAAY,EACZ1B,UAAW,CACP4B,OAAQ,CACJR,MAAO,CAACtE,MAAO,GAAIG,aAAc,IACjCuE,SAAU,CAAC1E,MAAO,GAAIG,aAAc,KAExC4E,OAAQ,CACJT,MAAO,CAAEtE,MAAO,GAAIG,aAAc,IAClCuE,SAAU,CAAE1E,MAAO,GAAIG,aAAc,IACrC6E,eAAgB,CAAEhF,MAAO,GAAIG,aAAc,IAC3C8E,YAAa,CAACjF,MAAO,GAAIG,aAAc,IACvC+E,UAAW,CAAClF,OAAO,EAAOG,aAAc,OAfrCmC,wEAkIV,IACGsC,EAAenC,KAAKQ,MAApB2B,WAER,OACI5F,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACVsF,GAAe5F,EAAAC,EAAAC,cAACiG,EAAD,CACZzF,OAAO,SACPG,kBAAmB4C,KAAK5C,kBACxBE,qBAAsB0C,KAAK1C,qBAC3BuB,iBAAkBmB,KAAKnB,iBACvBH,qBAAsBsB,KAAKtB,wBACxBnC,EAAAC,EAAAC,cAACkG,EAAD,CACH1F,OAAO,SACPG,kBAAmB4C,KAAK5C,kBACxBE,qBAAsB0C,KAAK1C,qBAC3BuB,iBAAkBmB,KAAKnB,iBACvBH,qBAAsBsB,KAAKtB,+BAnJ5BkE,aCSJC,mLARX,OACEtG,EAAAC,EAAAC,cAAA,OAAKI,UAAU,0BACbN,EAAAC,EAAAC,cAACqG,EAAD,cAJUF,mBCGlBG,IAASC,OAAOzG,EAAAC,EAAAC,cAACwG,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.270e3663.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FormLabel = (props) => {\r\n    return <label htmlFor={`${props.name}`} className=\"form__label\"> {props.children} </label>\r\n}\r\n\r\nconst InputInvalidText = (props) => {\r\n    return <p className=\"form__invalid\"> {props.children} </p>\r\n}\r\n\r\nconst InputEmail = (props) => {\r\n    const { formID, name, required = false, handleInputChange, getFormElementValues } = props;\r\n\r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n    const ifError = formElementData.valueInvalid;\r\n\r\n    const forName = `${formID}-${name}`;\r\n    \r\n    return (\r\n        <div className=\"form__element\">\r\n            <FormLabel name={forName}> {props.children} </FormLabel>\r\n            <input \r\n                type=\"text\" \r\n                onChange={(event) => handleInputChange(formID, { name }, event)} \r\n                className={`form__input ${ifError ? 'invalid' : ''}`}\r\n                id={forName} \r\n                required={required}\r\n                autoComplete=\"off\"\r\n                name={name}\r\n                value={value}\r\n            />\r\n            {ifError && <InputInvalidText>{ifError}</InputInvalidText>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst InputPassword = (props) => {\r\n    const { formID, name, required = false, handleInputChange, getFormElementValues } = props;\r\n    \r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n    const ifError = formElementData.valueInvalid;\r\n\r\n    const forName = `${formID}-${name}`;\r\n\r\n    return (\r\n        <div className=\"form__element\">\r\n            <FormLabel name={forName}> {props.children} </FormLabel>\r\n            <input \r\n                type=\"password\" \r\n                className={`form__input ${ifError ? 'invalid' : ''}`}\r\n                onChange={(event) => handleInputChange(formID, { name }, event)}\r\n                id={forName} \r\n                required={required}\r\n                autoComplete=\"off\"\r\n                name={name}\r\n                value={value}\r\n            />\r\n            {ifError && <InputInvalidText>{ifError}</InputInvalidText>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst InputPasswordWithLink = (props) => {\r\n    const { formID, name, required = false, handleInputChange, getFormElementValues } = props;\r\n    \r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n    const ifError = formElementData.valueInvalid;\r\n\r\n    const forName = `${formID}-${name}`;\r\n\r\n    return (\r\n        <div className=\"form__element\">\r\n            <div className=\"form__flex\">\r\n                <FormLabel name={forName}> {props.children} </FormLabel>\r\n                <a href=\"#\" className=\"form__link\">Забыли пароль?</a>    \r\n            </div>\r\n            <input \r\n                type=\"password\" \r\n                className={`form__input ${ifError ? 'invalid' : ''}`}\r\n                onChange={(event) => handleInputChange(formID, { name }, event)}\r\n                id={forName} \r\n                required={required}\r\n                autoComplete=\"off\"\r\n                name={name}\r\n                value={value}\r\n            />\r\n            {ifError && <InputInvalidText>{ifError}</InputInvalidText>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormTitle = (props) => {\r\n    return <h1 className=\"form__title\">{props.children}</h1>   \r\n};\r\n\r\nconst FormSubmitButton = (props) => {\r\n    const { formID, toggleValidAvailable } = props;\r\n    \r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"submit\" \r\n                className=\"form__submit\"\r\n                onSubmit={(event) => toggleValidAvailable(formID, event)}>\r\n                {props.children}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormAdditional = (props) => {\r\n    const { togglePopupForms } = props;\r\n\r\n    return (\r\n        <div className=\"popup__additional\">\r\n            <button className=\"popup__link\" onClick={togglePopupForms}> {props.children} </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormSelect = (props) => {\r\n    const { formID, name, handleInputChange, getFormElementValues } = props;\r\n    \r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n\r\n    const forName = `${formID}-${name}`;\r\n\r\n    return (\r\n        <div className=\"form__element\">\r\n            <FormLabel name={forName}> {props.children} </FormLabel>\r\n            <div className=\"select-container\">\r\n                <select \r\n                    name={name} \r\n                    id={forName}  \r\n                    className=\"form__select\"\r\n                    onChange={(event) => handleInputChange(formID, { name }, event)}\r\n                    value={value}>\r\n\r\n                    <option value=\"1111\">1111</option>\r\n                    <option value=\"2222\">2222</option>\r\n                    <option value=\"3333\">3333</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormTermOfUse = (props) => {\r\n    const { formID, name, required = false, handleInputChange, getFormElementValues } = props;\r\n    \r\n    const formElementData = getFormElementValues(formID, name);\r\n    const value = formElementData.valuel\r\n\r\n    const forName = `${formID}-${name}`;\r\n\r\n    return (\r\n        <div className=\"form__element checkbox\">\r\n            <label htmlFor={forName} className=\"checkbox__label\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name={name} \r\n                    required={required}\r\n                    id={forName} \r\n                    autoComplete=\"off\"\r\n                    className=\"checkbox__checkbox\" \r\n                    onChange={(event) => handleInputChange(formID, { name }, event)}\r\n                    value={value}\r\n                />\r\n                <span className=\"checkbox__checkmark\"></span> {props.children}\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { \r\n    InputEmail, \r\n    FormTitle, \r\n    InputPassword, \r\n    FormSubmitButton, \r\n    FormAdditional, \r\n    InputPasswordWithLink,\r\n    FormSelect,\r\n    FormTermOfUse\r\n};","import React from 'react';\r\nimport { \r\n    FormTitle, \r\n    InputEmail, \r\n    InputPassword, \r\n    FormSubmitButton, \r\n    FormAdditional, \r\n    FormTermOfUse,\r\n    InputPasswordWithLink,\r\n    FormSelect } from './FormComponents';\r\n\r\nconst FormSignin = (props) => {\r\n    const { formID, handleInputChange, getFormElementValues, togglePopupForms, toggleValidAvailable } = props;\r\n\r\n    return (\r\n        <div className=\"form form__container\">\r\n            <form className=\"form__sign-in\" onSubmit={(event) => toggleValidAvailable(formID, event)}>\r\n                <FormTitle>Вход в систему</FormTitle>    \r\n\r\n                <InputEmail \r\n                    handleInputChange={handleInputChange}\r\n                    getFormElementValues={getFormElementValues} \r\n                    formID={formID}\r\n                    // required=\"required\"\r\n                    name=\"email\"> \r\n                    Электронная почта \r\n                </InputEmail>\r\n\r\n                <InputPasswordWithLink\r\n                    handleInputChange={handleInputChange}\r\n                    getFormElementValues={getFormElementValues} \r\n                    formID={formID}\r\n                    // required=\"required\"\r\n                    name=\"password\"> \r\n                    Пароль\r\n                </InputPasswordWithLink>\r\n\r\n                <FormSubmitButton formID={formID}> Войти </FormSubmitButton>\r\n\r\n                <FormAdditional togglePopupForms={togglePopupForms}>Зарегистрироваться</FormAdditional>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FormSignup = (props) => {\r\n    const { formID, handleInputChange, getFormElementValues, togglePopupForms, toggleValidAvailable } = props;\r\n\r\n    return (\r\n        <div className=\"form form__container\">\r\n            <form className=\"form__sign-up\" onSubmit={(event) => toggleValidAvailable(formID, event)}>\r\n                <FormTitle>Регистрация в системе</FormTitle> \r\n\r\n                <InputEmail \r\n                    handleInputChange={handleInputChange}\r\n                    getFormElementValues={getFormElementValues} \r\n                    formID={formID}\r\n                    required=\"required\"\r\n                    name=\"email\"> \r\n                    Электронная почта \r\n                </InputEmail>\r\n\r\n                <InputPassword\r\n                    handleInputChange={handleInputChange} \r\n                    getFormElementValues={getFormElementValues}\r\n                    formID={formID}\r\n                    required=\"required\"\r\n                    name=\"password\">\r\n                    Пароль\r\n                </InputPassword>\r\n\r\n                <InputPassword\r\n                    handleInputChange={handleInputChange} \r\n                    getFormElementValues={getFormElementValues}\r\n                    formID={formID}\r\n                    required=\"required\"\r\n                    name=\"repeatPassword\">\r\n                    Повторите пароль\r\n                </InputPassword>\r\n\r\n                <FormSelect\r\n                    name=\"citizenship\"\r\n                    formID={formID}\r\n                    handleInputChange={handleInputChange}\r\n                    getFormElementValues={getFormElementValues}>\r\n                    Гражданство\r\n                </FormSelect>\r\n\r\n                <FormTermOfUse\r\n                    name=\"termOfUse\"\r\n                    formID={formID}\r\n                    required=\"required\"\r\n                    handleInputChange={handleInputChange}\r\n                    getFormElementValues={getFormElementValues}>\r\n                    Соглашаюсь с <a href=\"#\" className=\"text-blue\">правилами и условиями сервиса</a>\r\n                </FormTermOfUse>\r\n\r\n                <FormSubmitButton formID={formID}> Зарегистрироваться </FormSubmitButton>\r\n\r\n                <FormAdditional togglePopupForms={togglePopupForms}>Войти</FormAdditional>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { FormSignin, FormSignup };","import React, { Component } from 'react';\r\nimport { FormSignin, FormSignup } from './Forms';\r\nimport errorMessage from '../../text/text.json';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            submitResponse: false,\r\n            formSwitch: true,\r\n            formsData: {\r\n                signin: {\r\n                    email: {value: \"\", valueInvalid: \"\"},\r\n                    password: {value: \"\", valueInvalid: \"\"}   \r\n                },\r\n                signup: {\r\n                    email: { value: \"\", valueInvalid: \"\"} ,\r\n                    password: { value: \"\", valueInvalid: \"\"} ,\r\n                    repeatPassword: { value: \"\", valueInvalid: \"\" },\r\n                    citizenship: {value: \"\", valueInvalid: \"\"},\r\n                    termOfUse: {value: false, valueInvalid: \"\"}\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    handleInputChange = (id, element, event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const thisFormsData = this.state.formsData;\r\n        const formData = thisFormsData[id];\r\n        const { isValidAvailable } = formData;\r\n        const name = element.name;\r\n        const valueInvalid = isValidAvailable ? this.validHandler(name, value) : '';\r\n    \r\n        this.setState({\r\n            ...this.state,\r\n            formsData: {\r\n                ...thisFormsData,\r\n                [id]: {\r\n                    ...formData,\r\n                    [element.name]: {\r\n                        value: value,\r\n                        valueInvalid: valueInvalid\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n    }  \r\n\r\n    toggleValidAvailable = (id, event) => {\r\n        // It allows check the inputs changes in real time, when user clicked on submit button\r\n        event.preventDefault();\r\n        const thisFormsData = this.state.formsData;\r\n\r\n        this.setState({\r\n            formsData: {\r\n                ...thisFormsData,\r\n                [id]: {\r\n                    ...thisFormsData[id],\r\n                    isValidAvailable: true\r\n                }\r\n            }\r\n        }, () => { this.onSubmitValidThisForm(id) });\r\n    }\r\n\r\n    onSubmitValidThisForm = (id) => {\r\n        // The function replaces inputInvalid message (erros)\r\n        const formsData = this.state.formsData;\r\n        const formData = formsData[id];\r\n        const validedData = {};\r\n        \r\n        // It makes a new object with updated inputInvalid (errors)\r\n        Object.entries(formData).forEach(([name, element]) => {\r\n            if (name === 'isValidAvailable') {\r\n                validedData[name] = element;\r\n            } else {\r\n                element.valueInvalid = this.validHandler(name, element.value);\r\n                Object.assign(validedData, { [name]: element });\r\n            }\r\n        });\r\n\r\n        // It replaces previous formsData[id] with new\r\n        this.setState({\r\n            formsData: {\r\n                ...formsData,\r\n                [id]: validedData\r\n            }\r\n        });\r\n    }\r\n\r\n    validHandler = (name, value) => {\r\n        // General valid handler\r\n        switch(name) {\r\n            case \"email\":\r\n                return this.validEmail(value);\r\n            case \"password\":\r\n            default:\r\n                return this.validPassword(value);\r\n        }\r\n    }\r\n\r\n    validEmail = (value) => {\r\n        // Valid function\r\n        const emailValidRegExp = /\\S+@\\S+\\.\\S+/;\r\n\r\n        if (value.length === 0) {\r\n            return errorMessage.email.empty;\r\n        } else if (!emailValidRegExp.test(value)) {\r\n            return errorMessage.email.invalid;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    validPassword = (value) => {\r\n        // Valid function\r\n        return value.length === 0 ? errorMessage.password.empty : '';\r\n    }\r\n\r\n    getFormElementValues = (id, name) => {\r\n        // It transfers a value of input to functional component \r\n        const formData = this.state.formsData[id] ? this.state.formsData[id] : {};\r\n        return formData.hasOwnProperty(name) ? formData[name] : '';\r\n    }\r\n\r\n    togglePopupForms = (event) => {\r\n        // It changes the popups\r\n        event.preventDefault();\r\n        this.setState({\r\n            formSwitch: !this.state.formSwitch\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { formSwitch } = this.state;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                {formSwitch &&  <FormSignup \r\n                    formID=\"signup\" \r\n                    handleInputChange={this.handleInputChange}\r\n                    getFormElementValues={this.getFormElementValues}\r\n                    togglePopupForms={this.togglePopupForms}\r\n                    toggleValidAvailable={this.toggleValidAvailable}\r\n                />  || <FormSignin \r\n                    formID=\"signin\"\r\n                    handleInputChange={this.handleInputChange}\r\n                    getFormElementValues={this.getFormElementValues}\r\n                    togglePopupForms={this.togglePopupForms}\r\n                    toggleValidAvailable={this.toggleValidAvailable}\r\n                />}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Form from \"./Form\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"popup popup__container\">\r\n        <Form />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/App\";\r\n\r\nimport \"./assets/styles/main.scss\";\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}